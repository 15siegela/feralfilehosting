#!/bin/bash
#
############################
##### Basic Info Start #####
############################
#
# Script Author: adamaze
#
# Script Contributors: randomessence
#
# License: This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-sa/4.0/
#
# Bash Command for easy reference:
#
# wget -qO ~/install.znc http://git.io/vvfyN && bash ~/install.znc
#
############################
###### Basic Info End ######
############################
#
############################
#### Script Notes Start ####
############################
#
# Todo:
#	add configuring help?
#
############################
##### Script Notes End #####
############################
#
############################
## Version History Starts ##
############################
#
if [[ ! -z $1 && $1 == 'changelog' ]]; then echo
    #
    echo '1.0.1 push module with curl if required dependency is present otherwise skipped. Template updated'
    echo '1.0.0 automation'
    echo 'v0.8.0 Template update'
    echo 'v0.7.0 - visual and functional tweaks'
    echo 'v0.5.0 - initial commit'
    #
    echo
    exit
fi
#
############################
### Version History Ends ###
############################
#
############################
###### Variable Start ######
############################
#
# Script Version number is set here.
scriptversion="1.0.1"
#
# Script name goes here. Please prefix with install.
scriptname="install.znc"
#
# Author name goes here.
scriptauthor="adamaze"
#
# Contributor's names go here.
contributors="randomessence"
#
# Set the http://git.io/ shortened URL for the raw github URL here:
gitiourl="http://git.io/vvfyN"
#
# Don't edit: This is the bash command shown when using the info option.
gitiocommand="wget -qO ~/$scriptname $gitiourl && bash ~/$scriptname"
#
# This is the raw github url of the script to use with the built in updater.
scripturl="https://raw.githubusercontent.com/feralhosting/feralfilehosting/master/Feral%20Wiki/Software/ZNC%20-%20Basic%20Setup/scripts/install.znc"
#
zncpassword="$(< /dev/urandom tr -dc '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' | head -c20; echo;)"
zncport=$(shuf -i 10001-49999 -n 1)
#
znctemplate="http://git.io/vvTzB"
zncpassgen="http://git.io/vvTgf"
#
# Disables the built in script updater permanently by setting this variable to 0.
updaterenabled="1"
#
############################
####### Variable End #######
############################
#
############################
#### Script Info Starts ####
############################
#
# Use this to show a user script information when they use the info option with the script.
if [[ ! -z $1 && $1 == 'info' ]]
then
    echo
    echo -e "\033[32m""Script Details:""\e[0m"
    echo
    echo "Script version: $scriptversion"
    echo
    echo "Script Author: $scriptauthor"
    echo
    echo "Script Contributors: $contributors"
    echo
    echo -e "\033[32m""Script Information and usage instructions:""\e[0m"
    echo
    #
    ###################################
    #### Custom Script Notes Start ####
    ###################################
    echo -e "\033[32m""Script Notes - this script will do these things:""\e[0m"
    echo
    echo "1.1: Check if you require full charset support via the required dependency libicu-dev that is not installed by default."
    echo "1.2: If you require this dependency the script will check if it installed on the server and guide you to get it installed."
    echo "2: Download, configure, compile and install znc."
    echo "3: Run the znc make config setup process"
    echo "4: Install an @reboot crontab entry for znc"
    echo
    ###################################
    ##### Custom Script Notes End #####
    ###################################
    #
    echo
    echo -e "\033[32m""Script options:""\e[0m"
    echo
    echo -e "\033[36mchangelog\e[0m = See the version history and change log of this script."
    echo
    echo -e "Example usage: \033[36m$scriptname changelog\e[0m"
    echo
    echo -e "\033[36minfo\e[0m = Show the script information and usage instructions."
    echo
    echo -e "Example usage: \033[36m$scriptname info\e[0m"
    echo
    echo -e "\033[31mImportant note:\e[0m Options \033[36mqr\e[0m and \033[36mnu\e[0m are interchangeable and usable together."
    echo
    echo -e "For example: \033[36m$scriptname qr nu\e[0m or \033[36m$scriptname nu qr\e[0m will both work"
    echo
    echo -e "\033[36mqr\e[0m = Quick Run - use this to bypass the default update prompts and run the main script directly."
    echo
    echo -e "Example usage: \033[36m$scriptname qr\e[0m"
    echo
    echo -e "\033[36mnu\e[0m = No Update - disable the built in updater. Useful for testing new features or debugging."
    echo
    echo -e "Example usage: \033[36m$scriptname nu\e[0m"
    echo
    echo -e "\033[32mBash Commands:\e[0m"
    echo
    echo -e "$gitiocommand"
    echo
    echo -e "~/bin/$scriptname"
    echo
    echo -e "$scriptname"
    #
    echo
    exit
fi
#
############################
##### Script Info Ends #####
############################
#
############################
#### Self Updater Start ####
############################
#
# Quick Run option part 1: If qr is used it will create this file. Then if the script also updates, whihc woudl reset the option, it will then find this file and set it back.
if [[ ! -z $1 && $1 == 'qr' ]] || [[ ! -z $2 && $2 == 'qr' ]];then echo -n '' > ~/.quickrun; fi
#
# No Update option: This disables the updater features if the script option "nu" was used when running the script.
if [[ ! -z $1 && $1 == 'nu' ]] || [[ ! -z $2 && $2 == 'nu' ]]
then
    echo
    echo "The Updater has been temporarily disabled"
    echo
    scriptversion="$scriptversion-nu"
else
    #
    # Check to see if the variable "updaterenabled" is set to 1. If it is set to 0 the script will bypass the built in updater regardless of the options used.
    if [[ "$updaterenabled" -eq 1 ]]
    then
        [[ ! -d ~/bin ]] && mkdir -p ~/bin
        [[ ! -f ~/bin/"$scriptname" ]] && wget -qO ~/bin/"$scriptname" "$scripturl"
        #
        wget -qO ~/.000"$scriptname" "$scripturl"
        #
        if [[ $(sha256sum ~/.000"$scriptname" | awk '{print $1}') != $(sha256sum ~/bin/"$scriptname" | awk '{print $1}') ]]
        then
            echo -e "#!/bin/bash\nwget -qO ~/bin/$scriptname $scripturl\ncd && rm -f $scriptname{.sh,}\nbash ~/bin/$scriptname\nexit" > ~/.111"$scriptname"
            bash ~/.111"$scriptname"
            exit
        else
            if [[ -z $(ps x | fgrep "bash $HOME/bin/$scriptname" | grep -v grep | head -n 1 | awk '{print $1}') && $(ps x | fgrep "bash $HOME/bin/$scriptname" | grep -v grep | head -n 1 | awk '{print $1}') -ne "$$" ]]
            then
                echo -e "#!/bin/bash\ncd && rm -f $scriptname{.sh,}\nbash ~/bin/$scriptname\nexit" > ~/.222"$scriptname"
                bash ~/.222"$scriptname"
                exit
            fi
        fi
        cd && rm -f .{000,111,222}"$scriptname"
        chmod -f 700 ~/bin/"$scriptname"
        echo
    else
        echo
        echo "The Updater has been disabled"
        echo
        scriptversion="$scriptversion-DEV"
    fi
fi
#
# Quick Run option part 2: If quick run was set and the updater section completes this will enable quick run again then remove the file.
if [[ -f ~/.quickrun ]];then updatestatus="y"; rm -f ~/.quickrun; fi
#
############################
##### Self Updater End #####
############################
#
############################
#### Core Script Starts ####
############################
#
if [[ "$updatestatus" == "y" ]]
then
    :
else
    echo -e "Hello $(whoami), you have the latest version of the" "\033[36m""$scriptname""\e[0m" "script. This script version is:" "\033[31m""$scriptversion""\e[0m"
    echo
    read -ep "The script has been updated, enter [y] to continue or [q] to exit: " -i "y" updatestatus
    echo
fi
#
if [[ "$updatestatus" =~ ^[Yy]$ ]]
then
#
############################
#### User Script Starts ####
############################
#
    read -ep "Do you need the extra charset available in ZNC? (This is for non-english characters) [y/n]: " -n 1 REPLY
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        if [ "$(dpkg-query -s libicu-dev 2>&1 | grep -c 'ok installed')" -eq 0 ]; then
            echo -e "\033[31m""It looks like libicu-dev is not installed on your server.""\e[0m"
            echo -e Please open a ticket: "\033[32m"https://www.feralhosting.com/manager/tickets/new"\e[0m"
            echo "Paste the following into the ticket:"
            echo
            echo -e "Please can you install the ZNC 1.6 dependency for charset\n\nhttps://packages.debian.org/wheezy/libicu-dev\n\napt-get install libicu-dev\n\nThank you."
            echo
            echo -e "\033[33m""Once you are notified that the dependency has been installed, you can re-run this script""\e[0m"
            echo
            exit
        fi
    fi
    #
    echo -e "\033[33m""This script will download and install znc on your slot. It may take a few minutes...""\e[0m"
    echo
    mkdir -p ~/bin ~/.logs
    wget -qO ~/znc.tar.gz http://znc.in/releases/znc-latest.tar.gz
    tar xf ~/znc.tar.gz
    cd ~/znc-1.*
    echo "1: Configuring"
    echo
    ./configure --prefix="$HOME" > ~/.logs/znc-configure.log 2>&1
    echo "2: Compiling"
    echo
    make > ~/.logs/znc-make.log 2>&1
    echo "3: Installing"
    echo
    make install > ~/.logs/znc-make-install.log 2>&1
    cd && rm -rf znc{-1.*,.tar.gz}
    echo -e "\033[33m""Setting up ZNC using the template files.""\e[0m"
    echo
    killall -u $(whoami) znc > /dev/null 2>&1
    #
    if [ "$(dpkg-query -s libcurl4-openssl-dev 2>&1 | grep -c 'ok installed')" -eq 1 ]
    then
        echo "libcurl4-openssl-dev is installed. Installing znc push module."
        echo
        git clone https://github.com/jreese/znc-push.git > ~/.logs/znc-push.log 2>&1
        cd ~/znc-push
        make curl=yes >> ~/.logs/znc-push.log 2>&1
        make install >> ~/.logs/znc-push.log 2>&1
        cd && rm -rf znc-push
    else
        echo "libcurl4-openssl-dev is not installed. Skipping push module installation."
        echo
        echo "Please refer to the ZNC FAQ for how to get the dependency installed."
        echo "Once you have libcurl4-openssl-dev installed then install the push module manually."
        echo
    fi
    #
    mkdir -p ~/.znc/configs/
    wget -qO ~/.znc/configs/znc.conf "$znctemplate"
    wget -qO ~/zncpass.py "$zncpassgen"
    #
    sed -ri 's/SETAPASS/'"$zncpassword"'/g' ~/zncpass.py
    #
    while [[ "$(netstat -ln | grep ':'"$zncport"'' | grep -c 'LISTEN')" -eq "1" ]]
    do
        zncport=$(shuf -i 10001-49999 -n 1)
    done
    #
    sed -ri 's/<User SETAUSER>/<User '"$(whoami)"'>/g' ~/.znc/configs/znc.conf
    sed -ri 's/	Nick       = SETAUSER/	Nick       = '"$(whoami)"'/g' ~/.znc/configs/znc.conf
    sed -ri 's/	AltNick    = SETAUSER_/	AltNick    = '"$(whoami)"_'/g' ~/.znc/configs/znc.conf
    sed -ri 's/	Ident      = SETAUSER/	Ident      = '"$(whoami)"'/g' ~/.znc/configs/znc.conf
    sed -ri 's/	Port = SETAPORT/	Port = '"$zncport"'/g' ~/.znc/configs/znc.conf
    sed -ri 's/	Pass       = SETAPASS/	Pass       = '$(python ~/zncpass.py)'/g' ~/.znc/configs/znc.conf
    #
    rm -f ~/zncpass.py
    ~/bin/znc --makepem > /dev/null 2>&1
    ~/bin/znc
    #
    echo -e "\033[33m""\nNow that ZNC has been installed, configured, and started, we will make sure it starts if/when your server reboots.""\e[0m"
    echo
    #
    # adding to cron
    tmpcron=$(mktemp)
    if [ "$(crontab -l 2> /dev/null | grep -c '^@reboot ~/bin/znc$')" == "0" ]; then
        echo "appending znc to crontab."
        crontab -l 2> /dev/null > "$tmpcron"
        echo "@reboot ~/bin/znc" >> "$tmpcron"
        crontab "$tmpcron"
        rm "$tmpcron"
    else
        echo "znc @reboot is already in your crontab."
    fi
    # give user the full URL
    echo -e "\nClick on or copy the URL below to do additional configuration if needed\n"
    echo -e "\033[33m""https://$(hostname -f):$zncport""\e[0m"
    echo
    echo -e "Your znc WebUi username: $(whoami)"
    echo -e "Your znc WebUi password: $zncpassword"
    echo
    echo -e "Search the ZNC wiki for help connecting with different clients. http://wiki.znc.in/"
    echo
#
############################
##### User Script End  #####
############################
#
else
    echo -e "You chose to exit after updating the scripts."
    echo
    cd && bash
    exit
fi
#
############################
##### Core Script Ends #####
############################
#